Fase 2: Camada de Storage (2-3 dias)
2.1 Atualizar Interface IStorage (server/storage.ts)
export interface IStorage {
  // Users
  getUser(id: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: string, user: Partial<User>): Promise<User>;
  
  // Accounts
  getAccounts(userId: string): Promise<Account[]>;
  getAccount(id: string, userId: string): Promise<Account | undefined>;
  createAccount(account: InsertAccount): Promise<Account>;
  updateAccount(id: string, userId: string, account: Partial<Account>): Promise<Account>;
  deleteAccount(id: string, userId: string): Promise<void>;
  
  // Transactions
  getTransactions(userId: string, filters?: TransactionFilters): Promise<Transaction[]>;
  getTransaction(id: string, userId: string): Promise<Transaction | undefined>;
  createTransaction(transaction: InsertTransaction): Promise<Transaction>;
  updateTransaction(id: string, userId: string, transaction: Partial<Transaction>): Promise<Transaction>;
  deleteTransaction(id: string, userId: string): Promise<void>;
  
  // Categories
  getCategories(userId: string): Promise<Category[]>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Credit Cards
  getCreditCards(userId: string): Promise<CreditCard[]>;
  createCreditCard(card: InsertCreditCard): Promise<CreditCard>;
  updateCreditCard(id: string, userId: string, card: Partial<CreditCard>): Promise<CreditCard>;
  deleteCreditCard(id: string, userId: string): Promise<void>;
  
  // Monthly Plans
  getMonthlyPlan(userId: string, month: number, year: number): Promise<MonthlyPlan | undefined>;
  createMonthlyPlan(plan: InsertMonthlyPlan): Promise<MonthlyPlan>;
  updateMonthlyPlan(id: string, userId: string, plan: Partial<MonthlyPlan>): Promise<MonthlyPlan>;
}
2.2 Implementar DatabaseStorage
import { db } from './db';
import { eq, and, gte, lte, desc } from 'drizzle-orm';
export class DatabaseStorage implements IStorage {
  async getUser(id: string): Promise<User | undefined> {
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.id, id));
    return user;
  }
  async getAccounts(userId: string): Promise<Account[]> {
    return await db
      .select()
      .from(accounts)
      .where(eq(accounts.userId, userId))
      .orderBy(desc(accounts.isDefault), accounts.name);
  }
  async createAccount(account: InsertAccount): Promise<Account> {
    const [newAccount] = await db
      .insert(accounts)
      .values(account)
      .returning();
    return newAccount;
  }
  async getTransactions(userId: string, filters?: TransactionFilters): Promise<Transaction[]> {
    let query = db
      .select()
      .from(transactions)
      .where(eq(transactions.userId, userId));
    if (filters?.competenceMonth && filters?.competenceYear) {
      query = query.where(
        and(
          eq(transactions.competenceMonth, filters.competenceMonth),
          eq(transactions.competenceYear, filters.competenceYear)
        )
      );
    }
    if (filters?.type) {
      query = query.where(eq(transactions.type, filters.type));
    }
    return await query.orderBy(desc(transactions.date));
  }
  // ... implementar todos os m√©todos
}
export const storage = new DatabaseStorage();